#!/usr/bin/env python3
"""
Script de teste para verificar configura√ß√µes de desenvolvimento

Este script testa se todas as configura√ß√µes est√£o funcionando corretamente
para desenvolvimento multiplataforma.
"""

import os
import sys
import subprocess
import platform
import json
from pathlib import Path


def test_python_environment():
    """Testa o ambiente Python"""
    print("üêç Testando ambiente Python...")

    # Vers√£o do Python
    python_version = sys.version_info
    if python_version >= (3, 8):
        print(
            f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}"
        )
    else:
        print(
            f"‚ùå Python {python_version.major}.{python_version.minor}.{python_version.micro} (requer 3.8+)"
        )
        return False

    # Pygame
    try:
        import pygame

        print(f"‚úÖ Pygame {pygame.version.ver}")
    except ImportError:
        print("‚ùå Pygame n√£o instalado")
        return False

    return True


def test_vscode_config():
    """Testa configura√ß√µes do VS Code"""
    print("\n‚öôÔ∏è Testando configura√ß√µes VS Code...")

    vscode_dir = Path(".vscode")
    if not vscode_dir.exists():
        print("‚ùå Pasta .vscode n√£o encontrada")
        return False

    # Testa arquivos de configura√ß√£o
    config_files = {
        "launch.json": "Configura√ß√µes de execu√ß√£o (F5)",
        "tasks.json": "Tarefas automatizadas",
        "settings.json": "Configura√ß√µes do projeto",
        "extensions.json": "Extens√µes recomendadas",
    }

    all_good = True
    for file_name, description in config_files.items():
        file_path = vscode_dir / file_name
        if file_path.exists():
            try:
                with open(file_path, "r", encoding="utf-8") as f:
                    json.load(f)  # Valida JSON
                print(f"‚úÖ {file_name} - {description}")
            except json.JSONDecodeError:
                print(f"‚ùå {file_name} - JSON inv√°lido")
                all_good = False
        else:
            print(f"‚ùå {file_name} - N√£o encontrado")
            all_good = False

    return all_good


def test_android_setup():
    """Testa configura√ß√£o Android"""
    print("\nü§ñ Testando configura√ß√£o Android...")

    # Buildozer.spec
    if not os.path.exists("buildozer.spec"):
        print("‚ùå buildozer.spec n√£o encontrado")
        return False
    else:
        print("‚úÖ buildozer.spec encontrado")

    # Buildozer instalado
    try:
        result = subprocess.run(
            ["buildozer", "--version"], capture_output=True, text=True, timeout=10
        )
        if result.returncode == 0:
            print("‚úÖ Buildozer instalado")
        else:
            print("‚ùå Buildozer n√£o funcional")
            return False
    except (
        subprocess.CalledProcessError,
        FileNotFoundError,
        subprocess.TimeoutExpired,
    ):
        print("‚ùå Buildozer n√£o instalado")
        return False

    # Script run_android.py
    if os.path.exists("run_android.py"):
        print("‚úÖ Script run_android.py encontrado")
    else:
        print("‚ùå Script run_android.py n√£o encontrado")
        return False

    return True


def test_linux_setup():
    """Testa configura√ß√£o Linux"""
    print("\nüêß Testando configura√ß√£o Linux...")

    if platform.system() != "Windows":
        print("‚ö†Ô∏è  Teste de Linux via WSL2 dispon√≠vel apenas no Windows")
        return True

    # WSL2
    try:
        result = subprocess.run(
            ["wsl", "--status"], capture_output=True, text=True, timeout=10
        )
        if result.returncode == 0:
            print("‚úÖ WSL2 dispon√≠vel")
        else:
            print("‚ùå WSL2 n√£o configurado")
            return False
    except (
        subprocess.CalledProcessError,
        FileNotFoundError,
        subprocess.TimeoutExpired,
    ):
        print("‚ùå WSL2 n√£o instalado")
        return False

    # Script run_linux.py
    if os.path.exists("run_linux.py"):
        print("‚úÖ Script run_linux.py encontrado")
    else:
        print("‚ùå Script run_linux.py n√£o encontrado")
        return False

    # Setup script
    if os.path.exists("setup_wsl2.ps1"):
        print("‚úÖ Script setup_wsl2.ps1 encontrado")
    else:
        print("‚ùå Script setup_wsl2.ps1 n√£o encontrado")
        return False

    return True


def test_game_files():
    """Testa arquivos do jogo"""
    print("\nüéÆ Testando arquivos do jogo...")

    essential_files = {
        "main.py": "Arquivo principal do jogo",
        "requirements.txt": "Depend√™ncias Python",
        "requirements-mobile.txt": "Depend√™ncias mobile",
        "run_android_direct.py": "Script execu√ß√£o Android direta",
        "build_linux.py": "Script build Linux",
        "build_android_release.py": "Script build Android release",
    }

    essential_dirs = {
        "imagens": "Recursos gr√°ficos",
        "musicas": "Recursos de √°udio",
        "sounds": "Efeitos sonoros",
    }

    all_good = True

    # Testa arquivos
    for file_name, description in essential_files.items():
        if os.path.exists(file_name):
            print(f"‚úÖ {file_name} - {description}")
        else:
            print(f"‚ùå {file_name} - {description} (n√£o encontrado)")
            all_good = False

    # Testa diret√≥rios
    for dir_name, description in essential_dirs.items():
        if os.path.isdir(dir_name):
            file_count = len(list(Path(dir_name).rglob("*.*")))
            print(f"‚úÖ {dir_name}/ - {description} ({file_count} arquivos)")
        else:
            print(f"‚ùå {dir_name}/ - {description} (n√£o encontrado)")
            all_good = False

    return all_good


def show_launch_configurations():
    """Mostra as configura√ß√µes de execu√ß√£o dispon√≠veis"""
    print("\nüöÄ CONFIGURA√á√ïES DE EXECU√á√ÉO DISPON√çVEIS (F5):")
    print("=" * 50)

    try:
        with open(".vscode/launch.json", "r", encoding="utf-8") as f:
            launch_config = json.load(f)

        for i, config in enumerate(launch_config.get("configurations", []), 1):
            name = config.get("name", "Sem nome")
            program = config.get("program", "N/A")
            program = program.replace("${workspaceFolder}/", "")
            print(f"{i}. {name}")
            print(f"   Executa: {program}")
            print()

    except (FileNotFoundError, json.JSONDecodeError):
        print("‚ùå N√£o foi poss√≠vel ler as configura√ß√µes de execu√ß√£o")


def test_video_dependencies():
    """Testa depend√™ncias de v√≠deo (MoviePy/FFmpeg) e o v√≠deo de abertura"""
    print("\nüé¨ Testando player de v√≠deo (MoviePy/FFmpeg)...")
    ok = True

    # Verificar MoviePy
    try:
        import moviepy  # noqa: F401
        from moviepy.editor import VideoFileClip  # noqa: F401
        print(f"‚úÖ MoviePy {getattr(moviepy, '__version__', 'desconhecida')} instalado")
    except Exception as e:
        print(f"‚ùå MoviePy indispon√≠vel no interpretador atual ({sys.executable}): {e}")
        print("   Dica: instale as depend√™ncias neste Python com:")
        print(f"   \"{sys.executable}\" -m pip install -r requirements.txt")
        return False

    # Verificar imageio-ffmpeg / ffmpeg
    try:
        import imageio_ffmpeg as iio_ffmpeg  # noqa: F401
        ffmpeg_path = iio_ffmpeg.get_ffmpeg_exe()
        print(f"‚úÖ imageio-ffmpeg dispon√≠vel (ffmpeg: {ffmpeg_path})")
    except Exception as e:
        print(f"‚ùå imageio-ffmpeg/ffmpeg indispon√≠vel: {e}")
        print(f"   Dica: \"{sys.executable}\" -m pip install imageio-ffmpeg")
        ok = False

    # Verificar arquivo de v√≠deo de abertura
    video_path = os.path.join(".", "videos", "opening.mp4")
    abs_video = os.path.abspath(video_path)
    if not os.path.exists(video_path):
        print(f"‚ùå V√≠deo de abertura n√£o encontrado: {abs_video}")
        ok = False
    else:
        print(f"‚û°Ô∏è  Testando leitura de: {abs_video}")
        try:
            from moviepy.editor import VideoFileClip
            clip = VideoFileClip(abs_video)
            # For√ßa leitura de um frame inicial
            _ = clip.get_frame(0.0)
            print(f"‚úÖ Abriu v√≠deo de abertura (dur: {clip.duration:.2f}s, fps: {clip.fps})")
            clip.close()
        except Exception as e:
            print(f"‚ùå Erro ao abrir/ler v√≠deo de abertura com MoviePy: {e}")
            ok = False

    # Verificar arquivo de v√≠deo final
    end_path = os.path.join(".", "videos", "ending.mp4")
    abs_end = os.path.abspath(end_path)
    if not os.path.exists(end_path):
        print(f"‚ùå V√≠deo final n√£o encontrado: {abs_end}")
        ok = False
    else:
        print(f"‚û°Ô∏è  Testando leitura de: {abs_end}")
        try:
            from moviepy.editor import VideoFileClip
            clip = VideoFileClip(abs_end)
            _ = clip.get_frame(0.0)
            print(f"‚úÖ Abriu v√≠deo final (dur: {clip.duration:.2f}s, fps: {clip.fps})")
            clip.close()
        except Exception as e:
            print(f"‚ùå Erro ao abrir/ler v√≠deo final com MoviePy: {e}")
            ok = False

    return ok


def main():
    """Fun√ß√£o principal"""
    print("üß™ TESTE DE CONFIGURA√á√ÉO DE DESENVOLVIMENTO")
    print("=" * 50)

    tests = [
        ("Ambiente Python", test_python_environment),
        ("Player de V√≠deo (MoviePy/FFmpeg)", test_video_dependencies),
        ("Configura√ß√µes VS Code", test_vscode_config),
        ("Configura√ß√£o Android", test_android_setup),
        ("Configura√ß√£o Linux", test_linux_setup),
        ("Arquivos do Jogo", test_game_files),
    ]

    results = []

    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erro no teste {test_name}: {e}")
            results.append((test_name, False))

    # Resumo
    print("\nüìä RESUMO DOS TESTES:")
    print("=" * 30)

    passed = 0
    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{test_name}: {status}")
        if result:
            passed += 1

    print(f"\nüéØ Resultado: {passed}/{len(results)} testes passaram")

    if passed == len(results):
        print("\nüéâ Todas as configura√ß√µes est√£o funcionando!")
        print("Voc√™ pode usar F5 para executar o jogo em diferentes plataformas.")
    else:
        print("\n‚ö†Ô∏è  Algumas configura√ß√µes precisam de aten√ß√£o.")
        print("Consulte o arquivo DESENVOLVIMENTO.md para mais informa√ß√µes.")

    # Mostra configura√ß√µes dispon√≠veis
    show_launch_configurations()

    return passed == len(results)


if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\nüõë Teste cancelado pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        sys.exit(1)
