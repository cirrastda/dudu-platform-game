#!/usr/bin/env python3
"""
Script para build do jogo para Linux via WSL2

Este script automatiza o processo de build para Linux:
1. Verifica e configura WSL2
2. Instala depend√™ncias Linux
3. Executa build com PyInstaller
4. Cria pacote distribu√≠vel
"""

import os
import sys
import subprocess
import platform
import shutil
from pathlib import Path
from datetime import datetime


def check_wsl():
    """Verifica se WSL2 est√° dispon√≠vel"""
    if platform.system() != "Windows":
        print("‚ùå Este script deve ser executado no Windows")
        return False

    try:
        result = subprocess.run(
            ["wsl", "--status"], capture_output=True, text=True, timeout=10
        )
        if "WSL 2" in result.stdout:
            print("‚úÖ WSL2 detectado")
            return True
        else:
            print("‚ùå WSL2 n√£o encontrado")
            return False
    except (
        subprocess.CalledProcessError,
        FileNotFoundError,
        subprocess.TimeoutExpired,
    ):
        print("‚ùå WSL n√£o dispon√≠vel")
        return False


def get_wsl_path():
    """Converte o caminho Windows para WSL"""
    current_path = Path.cwd()
    # Converte C:\path para /mnt/c/path
    drive = current_path.parts[0].lower().replace(":", "")
    path_parts = current_path.parts[1:]
    wsl_path = f"/mnt/{drive}/" + "/".join(path_parts)
    return wsl_path


def setup_linux_environment():
    """Configura o ambiente Linux no WSL2"""
    print("üêß Configurando ambiente Linux...")
    wsl_path = get_wsl_path()

    commands = [
        f"cd '{wsl_path}'",
        "echo 'Diret√≥rio atual:'",
        "pwd",
        "echo 'Verificando Python...'",
        "python3 --version",
        "echo 'Verificando ambiente virtual...'",
        "if [ ! -d 'venv' ]; then python3 -m venv venv; fi",
        "echo 'Ativando ambiente virtual...'",
        "source venv/bin/activate",
        "echo 'Atualizando pip...'",
        "python3 -m pip install --upgrade pip",
        "echo 'Instalando depend√™ncias...'",
        "pip install -r requirements.txt",
        "echo 'Instalando PyInstaller...'",
        "pip install pyinstaller",
        "echo 'Instalando depend√™ncias de sistema...'",
        "sudo apt-get update -qq",
        "sudo apt-get install -y python3-dev libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev libfreetype6-dev libportmidi-dev",
    ]

    full_command = " && ".join(commands)

    try:
        result = subprocess.run(
            ["wsl", "--", "bash", "-c", full_command], check=False, text=True
        )

        if result.returncode == 0:
            print("‚úÖ Ambiente Linux configurado com sucesso!")
            return True
        else:
            print(f"‚ùå Erro na configura√ß√£o: c√≥digo {result.returncode}")
            return False

    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False


def build_linux_executable():
    """Executa o build do execut√°vel Linux"""
    print("\nüî® Iniciando build para Linux...")
    wsl_path = get_wsl_path()

    # Cria diret√≥rio de build se n√£o existir
    build_dir = Path("build_linux")
    build_dir.mkdir(exist_ok=True)

    commands = [
        f"cd '{wsl_path}'",
        "source venv/bin/activate",
        "echo 'Executando PyInstaller...'",
        "pyinstaller --onefile --windowed --name jumpandhit_linux --distpath dist/linux --workpath build_linux/work --specpath build_linux main.py",
        "echo 'Copiando recursos...'," "cp -r imagens dist/linux/",
        "cp -r musicas dist/linux/",
        "cp -r sounds dist/linux/",
        "echo 'Build conclu√≠do!'",
    ]

    full_command = " && ".join(commands)

    try:
        print("‚è≥ Este processo pode demorar alguns minutos...")

        process = subprocess.Popen(
            ["wsl", "--", "bash", "-c", full_command],
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            bufsize=1,
            universal_newlines=True,
        )

        # Mostra output em tempo real
        for line in process.stdout:
            print(line.rstrip())

        process.wait()

        if process.returncode == 0:
            print("\n‚úÖ Build Linux conclu√≠do com sucesso!")
            return True
        else:
            print(f"\n‚ùå Build falhou com c√≥digo {process.returncode}")
            return False

    except KeyboardInterrupt:
        print("\nüõë Build cancelado pelo usu√°rio")
        return False
    except Exception as e:
        print(f"\n‚ùå Erro durante o build: {e}")
        return False


def create_linux_package():
    """Cria pacote distribu√≠vel para Linux"""
    print("\nüì¶ Criando pacote Linux...")

    dist_dir = Path("dist") / "linux"

    if not dist_dir.exists():
        print("‚ùå Diret√≥rio de distribui√ß√£o n√£o encontrado")
        return False

    # Cria diret√≥rio de releases
    releases_dir = Path("releases")
    releases_dir.mkdir(exist_ok=True)

    # Nome do pacote com timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    package_name = f"jumpandhit_linux_{timestamp}"
    package_dir = releases_dir / package_name

    try:
        # Copia arquivos para o pacote
        shutil.copytree(dist_dir, package_dir)

        # Cria script de execu√ß√£o
        run_script = package_dir / "run.sh"
        with open(run_script, "w") as f:
            f.write("#!/bin/bash\n")
            f.write('cd "$(dirname "$0")"\n')
            f.write("./jumpandhit_linux\n")

        # Torna o script execut√°vel
        os.chmod(run_script, 0o755)

        # Cria README
        readme = package_dir / "README.txt"
        with open(readme, "w") as f:
            f.write("Jump and Hit - Linux Version\n")
            f.write("============================\n\n")
            f.write("Para executar o jogo:\n")
            f.write("1. Abra um terminal\n")
            f.write("2. Navegue at√© esta pasta\n")
            f.write("3. Execute: ./run.sh\n")
            f.write("   ou: ./jumpandhit_linux\n\n")
            f.write("Requisitos:\n")
            f.write("- Linux x64\n")
            f.write("- Bibliotecas SDL2 (geralmente j√° instaladas)\n")
            f.write("- Placa de som (opcional)\n\n")
            f.write(
                f"Build criado em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            )

        # Cria arquivo ZIP
        zip_path = releases_dir / f"{package_name}.zip"
        shutil.make_archive(str(zip_path.with_suffix("")), "zip", package_dir)

        print(f"‚úÖ Pacote Linux criado: {zip_path}")
        print(f"üìÅ Pasta: {package_dir}")

        return True

    except Exception as e:
        print(f"‚ùå Erro ao criar pacote: {e}")
        return False


def test_linux_executable():
    """Testa o execut√°vel Linux"""
    print("\nüß™ Testando execut√°vel Linux...")
    wsl_path = get_wsl_path()

    commands = [
        f"cd '{wsl_path}/build_linux/dist'",
        "echo 'Verificando execut√°vel...'",
        "ls -la jumpandhit_linux",
        "echo 'Testando execu√ß√£o (5 segundos)...'",
        "timeout 5s ./jumpandhit_linux || echo 'Teste conclu√≠do (timeout esperado)'",
    ]

    full_command = " && ".join(commands)

    try:
        result = subprocess.run(
            ["wsl", "--", "bash", "-c", full_command],
            capture_output=True,
            text=True,
            timeout=30,
        )

        print(result.stdout)
        if result.stderr:
            print("Avisos:", result.stderr)

        print("‚úÖ Teste do execut√°vel conclu√≠do")
        return True

    except subprocess.TimeoutExpired:
        print("‚è∞ Timeout no teste (normal)")
        return True
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False


def show_linux_requirements():
    """Mostra os requisitos para build Linux"""
    print("\nüìã REQUISITOS PARA BUILD LINUX:")
    print("1. Windows com WSL2 instalado")
    print("2. Distribui√ß√£o Linux no WSL2 (Ubuntu recomendado)")
    print("3. Python 3.8+ na distribui√ß√£o Linux")
    print("4. Sudo/root access no WSL2")
    print("5. Conex√£o com internet para instalar depend√™ncias")
    print("\nüí° DICAS:")
    print("- Execute 'setup_wsl2.ps1' para configura√ß√£o inicial")
    print("- O build pode demorar 5-10 minutos na primeira vez")
    print("- Builds subsequentes s√£o mais r√°pidos")
    print("- O execut√°vel gerado roda em qualquer Linux x64")


def main():
    """Fun√ß√£o principal"""
    print("üêß BUILD LINUX VIA WSL2")
    print("=" * 30)
    print("Este script ir√°:")
    print("1. üîç Verificar WSL2")
    print("2. üêß Configurar ambiente Linux")
    print("3. üî® Fazer build do execut√°vel")
    print("4. üì¶ Criar pacote distribu√≠vel")
    print("5. üß™ Testar execut√°vel")
    print()

    # Verifica WSL2
    if not check_wsl():
        show_linux_requirements()
        return False

    # Configura ambiente
    if not setup_linux_environment():
        print("‚ùå Falha na configura√ß√£o do ambiente")
        return False

    # Executa build
    if not build_linux_executable():
        print("‚ùå Falha no build")
        return False

    # Cria pacote
    if not create_linux_package():
        print("‚ùå Falha na cria√ß√£o do pacote")
        return False

    # Testa execut√°vel
    if not test_linux_executable():
        print("‚ö†Ô∏è  Falha no teste (pode ser normal)")

    print("\nüéâ Build Linux conclu√≠do com sucesso!")
    print("üìÅ Verifique a pasta 'releases' para os arquivos gerados")

    return True


if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\nüõë Opera√ß√£o cancelada pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        sys.exit(1)
